my.vars<-load.variables()
source('header.R')
my.vars<-load.variables()
my.vars
length(my.vars)
my.vars[[1]]
my.vars<-load.variables()
my.vars[[2]]
source('~/Dropbox/teaching/OPNS910/solutions/OPNS910_holmes2011/code/m.R')
source('~/Dropbox/teaching/OPNS910/solutions/OPNS910_holmes2011/code/modules/makeData.R')
source('~/.active-rstudio-document')
my.vars<-load.variables()
X=my.vars$X
Y=my.vars$Y
Z=my.vars$Z
X=my.vars$X
Y=my.vars$Y
Z=my.vars$Z
library('Matrix')
Z=bdiag(Z, diag(ncol(X))) %>% as.matrix()
X=rbind(X, -diag(ncol(X)))
Y=c(Y, rep(0, ncol(X)))
Q.fun<-function(theta){
t(Z)%*%(Y-X%*%theta) %>%
pmin(0) %>%
as.data.frame() %>%
mutate(V1 = V1^2) %>%
sum()
}
optim(par=rep(1, ncol(X)), fn = Q.fun)$par
t(Z)%*%(Y-X%*%theta) %>%
pmin(0) %>%
as.data.frame() %>%
mutate(V1 = V1^2) %>%
sum()
}
t(Z)%*%(Y-X%*%theta) %>%
pmin(0) %>%
as.data.frame() %>%
mutate(V1 = V1^2) %>%
sum()
}
Q.fun<-function(theta){
t(Z)%*%(Y-X%*%theta) %>%
pmin(0) %>%
as.data.frame() %>%
mutate(V1 = V1^2) %>%
sum()
}
optim(par=rep(1, ncol(X)), fn = Q.fun)$par
optim(par=rep(2, ncol(X)), fn = Q.fun)$par
l=1
starting.value=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))$par
starting.value
optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
l=2
y=constrOptim(theta=starting.value, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y)
y
?constrOptim
o=constrOptim(theta=starting.value, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y)
data.frame(convergence=o$convergence, par=rbind(o$par))
num.tries=25
x=llply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
starting.value=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))$par
laply(seq(starting.value), function(l){
o=constrOptim(theta=starting.value, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y)
data.frame(convergence=o$convergence, par=rbind(o$par))
})
x
num.tries=25
x=llply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
starting.value=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))$par
laply(seq(starting.value), function(l){
o=constrOptim(theta=starting.value, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
x
x=ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
starting.value=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))$par
laply(seq(starting.value), function(l){
o=constrOptim(theta=starting.value, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
o
num.tries=25
x=ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value==0){
laply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
}
})
num.tries=5
x=ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value==0){
laply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
}
})
num.tries=5
x=ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
laply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
}
})
num.tries=5
x=ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
laply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
}
})
num.tries=5
x=ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
laply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
laply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
num.tries=2
x=ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
laply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
num.tries=2
x=ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
laply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
num.tries=2
x=ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
laply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
x
num.tries=5
x=llply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
laply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
x
x=ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
ldply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
x
num.tries=25
x=ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
ldply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
x
x %>%
filter(convergence==0) %>%
select(-convergence) %>%
melt()
library('reshape2')
x %>%
filter(convergence==0) %>%
select(-convergence) %>%
melt()
x %>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>% head()
x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable, max(value))
x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(max=max(value))
x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable)
?summarise
x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(max=pmax(value))
x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable)
x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(max=pmax(value))
x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(max=mean(value))
x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(max(value))
y=x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable)
class(y)
y
summarise(y, max(value))
?group_by
x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable)
y=x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable)
tail(y)
head(y)
y
summarise(y, h=mean(value))
planes <- group_by(hflights_df, TailNum)
library(hflights)
planes <- group_by(hflights_df, TailNum)
install.packages('dplyr')
install.packages("dplyr")
library('dplyr')
y=x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(max(value))
library('reshape2')
y=x%>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(max(value))
?summarise
y
num.tries=25
ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
ldply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
}) %>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(maxVal=max(value))
source('~/Dropbox/teaching/OPNS910/solutions/OPNS910_holmes2011/code/header.R')
varSave<-'../variables/'
ex.mods<-'modules/'
library('plyr')
library('reshape2')
library('dplyr')
my.vars<-load.variables()
X=my.vars$X
Y=my.vars$Y
Z=my.vars$Z
library('Matrix')
Z=bdiag(Z, diag(ncol(X))) %>% as.matrix()
X=rbind(X, -diag(ncol(X)))
Y=c(Y, rep(0, ncol(X)))
#define function in line (10) of Holmes (2011)
Q.fun<-function(theta){
t(Z)%*%(Y-X%*%theta) %>%
pmin(0) %>%
as.data.frame() %>%
mutate(V1 = V1^2) %>%
sum()
}
#Try at several starting values
num.tries=25
ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
ldply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
}) %>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(maxVal=max(value))
?summarise
varSave<-'../variables/'
ex.mods<-'modules/'
library('dplyr')
library('plyr')
library('reshape2')
num.tries=3
ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
ldply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
}) %>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(maxVal=max(value))
varSave<-'../variables/'
ex.mods<-'modules/'
library('dplyr')
library('plyr')
library('reshape2')
.paths()
.path()
my.vars<-load.variables()
source('header.R')
my.vars<-load.variables()
source('~/Dropbox/teaching/OPNS910/solutions/OPNS910_holmes2011/code/modules/loadVars.R')
my.vars<-load.variables()
X=my.vars$X
Y=my.vars$Y
Z=my.vars$Z
library('Matrix')
Z=bdiag(Z, diag(ncol(X))) %>% as.matrix()
X=rbind(X, -diag(ncol(X)))
Y=c(Y, rep(0, ncol(X)))
#define function in line (10) of Holmes (2011)
Q.fun<-function(theta){
t(Z)%*%(Y-X%*%theta) %>%
pmin(0) %>%
as.data.frame() %>%
mutate(V1 = V1^2) %>%
sum()
}
#Try at several starting values
num.tries=3
ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
ldply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
}) %>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
summarise(maxVal=max(value))
num.tries=3
ldply(seq(num.tries), function(i){
#use Q.fun to find a random starting point that satesfies the conditions
o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))
if(o$value>0) return()
ldply(seq(ncol(X)), function(l){
o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))
data.frame(convergence=o$convergence, par=rbind(o$par))
})
}) %>%
filter(convergence==0) %>%
select(-convergence) %>%
melt() %>%
group_by(variable) %>%
dplyr::summarise(maxVal=max(value))
.libPaths
.libPaths()
library('dplyr')
detach('plyr')
