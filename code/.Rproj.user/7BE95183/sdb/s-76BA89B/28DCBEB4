{
    "contents" : "get.largest.theta<-function(X, Y, Z){\n  #Inputs:\n  #X is a T*K matrix of independent variables\n  #Y is a vector of $T$ dependent variables\n  #Z is a T*J matrix of instrumental variables, for J>=K\n  #Output: \n  #A vector whose kth element contains the largest possible theta_k value, for some theta vector that satesfies (1) theta>=0 and (2) Z'(Y-X*theta) >= 0. (Note, theta_k is the kth element of the theta vector.)\n  \n  #modify matricies to incorporate theta>=0 constraints; bdiag creates block diagonal matricies\n  library('Matrix')\n  Z=bdiag(Z, diag(ncol(X))) %>% as.matrix()\n  X=rbind(X, -diag(ncol(X)))\n  Y=c(Y, rep(0, ncol(X)))\n  \n  #define function in line (10) of Holmes (2011)\n  Q.fun<-function(theta){\n    t(Z)%*%(Y-X%*%theta) %>%\n      pmin(0) %>%\n      as.data.frame() %>%\n      mutate(V1 = V1^2) %>%\n      sum()\n  }\n\n  #Try at several starting values\n  num.tries=20\n  ldply(seq(num.tries), function(i){\n    #use Q.fun to find a random starting point that satesfies the conditions\n    o=optim(par=3*runif(ncol(X)), fn = Q.fun, control=list(maxit=5000))\n    if(o$value>0) return()\n    ldply(seq(ncol(X)), function(l){\n      #now maximize theta_l, subject to the given starting values\n      o=constrOptim(theta=o$par, f=function(theta) -theta[l], grad=NULL, ui=-t(Z)%*%X, ci=-t(Z)%*%Y, control=list(maxit=5000))\n      data.frame(convergence=o$convergence, par=rbind(o$par))\n    })\n  }) %>%\n    filter(convergence==0) %>%\n    select(-convergence) %>%\n    melt() %>%\n    group_by(variable) %>%\n    summarise(maxVal=max(value))    \n}\n",
    "created" : 1406177626173.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1995182012",
    "id" : "28DCBEB4",
    "lastKnownWriteTime" : 1406243332,
    "path" : "~/Dropbox/teaching/OPNS910/solutions/OPNS910_holmes2011/code/modules/findTheta.R",
    "project_path" : "modules/findTheta.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}